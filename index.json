[{"content":" 從攝影師到程式開發者 # 大家好，我是 Bukun 步滾，一名攝影師，現在正在學習程式開發，希望能結合過去的創意經驗，開發有趣且實用的應用程式。\n我過去從事影像製作多年，擅長導演、拍攝與剪輯，曾與多位藝人及品牌合作，創作各類型的影像作品。然而，在影像創作的過程中，我對於數位產品與科技應用產生了濃厚的興趣，最終決定踏上程式開發的旅程。\n學習方向 # 目前我專注於學習全端開發，主要使用的技術包括：\nPython：後端開發與數據處理 Django：Web 應用程式框架 HTML \u0026amp; CSS：前端頁面開發 JavaScript：動態交互功能 透過專案實作，我正在努力提升自己的開發能力，並計畫在未來結合影像與技術，創造獨特的數位產品。\n目前專案 # 我目前正在開發一款名為 PicTrace 的專案，這是一個影像管理與追蹤系統，透過 Django 和前端技術實現。\nbukun1012/PicTrace 攝影打卡地圖網站 HTML 0 0 你可以在 GitHub 查看專案的完整代碼，歡迎交流與提供建議！\n為什麼選擇程式開發？ # 影像創作與程式開發看似不同，但本質上都需要創意、邏輯思維與細節掌控。攝影讓我學會了構圖與敘事，而程式開發則讓我可以將想法轉化為實際應用。\n我的目標是成為一名能夠獨立開發專案的軟體工程師，並探索更多技術與影像的結合點，例如互動式網站、影像處理應用等。\n影像作品 # 以下是我的影像作品，涵蓋了不同類型的影像創作，包括微電影、音樂 MV 及商業攝影。我希望透過這些作品，呈現我的影像敘事能力及視覺創意。\nPrevious Nextsads 未來展望 # 我希望未來能夠參與更多開發專案，累積實戰經驗，並最終能夠透過技術創造更多有價值的產品。如果你對程式開發或影像創作有興趣，歡迎與我交流！\n","externalUrl":null,"permalink":"/bukunblog/about-me/","section":"Bukun的軟體學習部落格","summary":"","title":"關於我","type":"page"},{"content":" 題目描述 # 給定一個表示羅馬數字的字串 s，將其轉換為對應的整數。\n羅馬數字規則 # 羅馬數字包含 7 種基本符號及其對應的數值：\n符號 數值 I 1 V 5 X 10 L 50 C 100 D 500 M 1000 組合規則 # 正常加法：較大的數字在左，較小的數字在右時，直接相加：\n”VI” = 5 + 1 = 6 ”MCL” = 1000 + 100 + 50 = 1150 減法規則：當較小的數字出現在較大的數字前面，代表「前者應從後者減去」：\n”IV” = 5 - 1 = 4 ”IX” = 10 - 1 = 9 ”XL” = 50 - 10 = 40 ”XC” = 100 - 10 = 90 ”CD” = 500 - 100 = 400 ”CM” = 1000 - 100 = 900 範例\n”III” → 3 (1 + 1 + 1) ”LVIII” → 58 (50 + 5 + 3) ”MCMXCIV” → 1994 (1000 + (1000-100) + (100-10) + (5-1)) 解法思路 # 方法：從右往左遍歷 # 使用字典儲存羅馬數字對應的數值。 從右向左遍歷字串： 若當前數值小於前一個數值，則執行「減法」。 否則，執行「加法」。 計算總和，輸出結果。 Python 解法 # def romanToInt(s: str) -\u0026gt; int: # 1. 建立羅馬數字對應的字典 roman_map = { ‘I ’: 1, ‘V ’: 5, ‘X ’: 10, ‘L ’: 50, ‘C ’: 100, ‘D ’: 500, ‘M ’: 1000 } total = 0 # 最終的整數值 prev_value = 0 # 記錄前一個數字的值 # 2. 反向遍歷羅馬數字 for char in reversed(s): current_value = roman_map[char] # 取得當前字母對應的數值 # 3. 若當前數字小於前一個數字，則執行減法 if current_value \u0026lt; prev_value: total -= current_value else: total += current_value # 4. 更新 prev_value prev_value = current_value return total 解法解析 # 為何從右到左遍歷 # 考慮以下案例：\n“MCMXCIV” (1994) 若從左往右處理，需先判斷 “CM”、“XC”、“IV” 這些特殊減法情況，會比較麻煩。 但從右往左遍歷時，每次只需比較當前值與前一個值，減少額外判斷。 如何處理減法？ # 在反向遍歷過程中：\n若 current_value \u0026lt; prev_value，表示這是 減法組合（例如 IV，I \u0026lt; V），則 減去該數值。 否則，直接加上該數值。 例如 ”MCMXCIV“：\n1.讀取 ’V‘ (5) → 加 5 2.讀取 ’I‘ (1) → 減 1（因為 I \u0026lt; V） 3.讀取 ’C‘ (100) → 加 100 4.讀取 ’X‘ (10) → 減 10（因為 X \u0026lt; C） 5.讀取 ’M‘ (1000) → 加 1000 6.讀取 ’C‘ (100) → 減 100（因為 C \u0026lt; M） 7.讀取 ’M‘ (1000) → 加 1000 8.\n最後結果 = 1994 時間與空間複雜度 # 分析 複雜度\n時間複雜度 O(n) （遍歷一次字串）\n空間複雜度 O(1) （使用固定大小的字典）\n由於每個字母只遍歷一次，且字典查找是 O(1)。\n測試 # print(romanToInt(”III“)) # 3 print(romanToInt(”IV“)) # 4 print(romanToInt(”IX“)) # 9 print(romanToInt(”LVIII“)) # 58 print(romanToInt(”MCMXCIV“)) # 1994 總結 # 這題的關鍵在於： - 1. 使用字典儲存羅馬數字對應的數值。 - 2. 從右到左遍歷字串，減少特殊情況的判斷。 - 3. 判斷是否需要減法（當前數值 \u0026lt; 前一個數值）。 - 4. 時間複雜度 O(n)，空間複雜度 O(1)。\n這種從右往左的思路，不僅適用於這題，也是一種常見的處理數值組合的技巧，值得記住！\n","date":"2025-02-26","externalUrl":null,"permalink":"/bukunblog/docs/leetcode-romantointeger/","section":"文章","summary":"","title":"[Leetcode]第13題Romantointeger的解法與思路","type":"docs"},{"content":"","date":"2025-02-26","externalUrl":null,"permalink":"/bukunblog/categories/","section":"📂分類","summary":"","title":"📂分類","type":"taxonomy"},{"content":"","date":"2025-02-26","externalUrl":null,"permalink":"/bukunblog/","section":"Bukun的軟體學習部落格","summary":"","title":"Bukun的軟體學習部落格","type":"page"},{"content":"","date":"2025-02-26","externalUrl":null,"permalink":"/bukunblog/series/leetcode/","section":"Series","summary":"","title":"Leetcode","type":"series"},{"content":"","date":"2025-02-26","externalUrl":null,"permalink":"/bukunblog/categories/leetcode/","section":"📂分類","summary":"","title":"Leetcode","type":"categories"},{"content":"","date":"2025-02-26","externalUrl":null,"permalink":"/bukunblog/tags/python/","section":"🏷️標籤","summary":"","title":"Python","type":"tags"},{"content":"","date":"2025-02-26","externalUrl":null,"permalink":"/bukunblog/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","date":"2025-02-26","externalUrl":null,"permalink":"/bukunblog/tags/","section":"🏷️標籤","summary":"","title":"🏷️標籤","type":"taxonomy"},{"content":"","date":"2025-02-26","externalUrl":null,"permalink":"/bukunblog/docs/","section":"文章","summary":"","title":"文章","type":"docs"},{"content":"","date":"2025-02-26","externalUrl":null,"permalink":"/bukunblog/tags/%E6%BC%94%E7%AE%97%E6%B3%95/","section":"🏷️標籤","summary":"","title":"演算法","type":"tags"},{"content":"","date":"2025-02-26","externalUrl":null,"permalink":"/bukunblog/tags/%E6%95%B8%E7%B5%84/","section":"🏷️標籤","summary":"","title":"數組","type":"tags"},{"content":"題目：\n給定一個整數 x，如果 x 是回文數，則返回 true，否則返回 false。\n回文數是指正著讀和倒著讀都一數。\n範例\nInput: x = 121 Output: true Explanation: 121 正著讀和倒著讀都一樣 Input: x = -121 Output: false Explanation: -121 反轉後是 121-，不相等 Input: x = 10 Output: false Explanation: 10 反轉後是 01，不相等 初步解析 # 看完題目後我有幾個想法\n直接將數字int轉成字串str，再用切片反轉比較是否相同 負數絕對不是回文數，例如-121 反轉後為 121-\n有了想法後我就嘗試轉字串解法 解法 1：轉換字串解法 # def isPalindrome(x: int) -\u0026gt; bool: return str(x) == str(x)[::-1] 步驟解析 # str(x): 先將數字 x 轉成字串，例如 x = 121 變成 ”121“。 str(x)[::-1]: 反轉字串，例如 ”121“ 反轉後還是 ”121“，但 ”-121“ 反轉後是 ”121-“，不同於原來 的字串。 return str(x) == str(x)[::-1]: 比較原始字串和反轉後的字串是否相等。 時間與空間複雜度 # 時間複雜度：O(n)，因為字串反轉需要 O(n) 的時間。 空間複雜度：O(n)，因為建立了新的字串。 小結 # 沒想到測試之後這題就解開了\u0026hellip;\n完全出乎我的意料\n於是我再思考該怎麼不轉字串來解出題目，並且減少計算量\n解法 2：數學解法 # 再次分析 # 負數不可能是回文數，因為 - 會影響正反讀的結果，例如 -121 反轉後變成 121-，所以直接返回 False。 如果數字以 0 結尾（但不是 0 本身），它不可能是回文數，例如 10 反轉後變成 01，不同於原來的 10，所以直接返回 False。 只需要反轉數字的一半。例如 1221 反轉一半後會變成 12，然後可以直接比較這兩部分是否相等。這樣可以避免反轉整個數字，減少運算量。 實作解法 # def isPalindrome(x: int) -\u0026gt; bool: if x \u0026lt; 0 or (x % 10 == 0 and x != 0): return False reversed_half = 0 while x \u0026gt; reversed_half: reversed_half = reversed_half * 10 + x % 10 x //= 10 return x == reversed_half or x == reversed_half // 10 詳細步驟解析 # 我先以 x = 1221 來做接下來的舉例\nstep1 排除特殊情況 # if x \u0026lt; 0 or (x % 10 == 0 and x != 0): return False 這一行判斷的是\nx \u0026lt; 0？ False（1221 不是負數）。 x % 10 == 0 and x != 0？ False（1221 不是以 0 結尾）。\n那我們繼續往下執行 step2 逐步反轉數字的一半 # reversed*half = 0 while x \u0026gt; reversed_half: reversed_half = reversed_half * 10 + x % 10 x //= 10 先用變數reversed_half存放反轉後的數字的一半\n且先初始化為 0\n每次只處理 x 的最後一位數\n第一輪迴圈：\n• reversed*half = 0 * 10 + 1221 % 10 = 1\n• x = 1221 // 10 = 122\n• 現在 x = 122，reversed_half = 1，還沒過半，繼續執行迴圈。\n第二輪迴圈：\n• reversed_half = 1 * 10 + 122 % 10 = 12\n• x = 122 // 10 = 12\n• 現在 x = 12，reversed_half = 12，此時 x 和 reversed_half 相等，代表數字已處理一半。\n迴圈結束條件：\n• 當 x \u0026lt;= reversed_half 時，代表數字已經處理一半，可以跳出迴圈。\nstep3 判斷是否為回文 # return x == reversed_half or x == reversed_half // 10 • 為什麼需要 x == reversed_half？\n• 如果數字長度是偶數，例如 1221，此時 x = 12，reversed_half = 12，直接相等，所以 return True。\n• 為什麼還要 x == reversed_half // 10？\n• 如果數字長度是奇數，例如 12321：\n• 迴圈結束時 x = 12，但 reversed_half = 123。\n• reversed_half 多了一位數，所以我們可以**去掉最後一位（// 10）**來做比較。\n• reversed_half // 10 = 123 // 10 = 12，剛好等於 x，所以 return True。\n時間與空間複雜度 # 時間複雜度：O(log n)，因為 x 每次都減少 1 位數，所以迴圈大約執行 log10(n) 次。 空間複雜度：O(1)，只用了 reversed_half 這個額外變數。 總結 # 如果只是解題，那一開始的字串解法較簡單快速\n若考慮到優化，則應該使用數字解法\n","date":"2025-02-26","externalUrl":null,"permalink":"/bukunblog/docs/leetcode-palindromenumber/","section":"文章","summary":"","title":"[Leetcode]第9題的Palindrome Number解法與思路","type":"docs"},{"content":"","date":"2025-02-26","externalUrl":null,"permalink":"/bukunblog/tags/%E5%84%AA%E5%8C%96/","section":"🏷️標籤","summary":"","title":"優化","type":"tags"},{"content":"前面文章已經大致了解 Django 運作模式，且也有了基礎設置\n而在 Web 應用中，用戶註冊與登入 是常見且重要的功能。\n這篇文章將一起完成 Django 的用戶註冊和登入功能\n使用 Django 的內建驗證系統，實現完整的帳號管理。\n1. 設定 Django 專案 # 首先，建立一個新的 Django 專案與應用：\ndjango-admin startproject myproject cd myproject python manage.py startapp accounts 接著，將 accounts 加入 settings.py：\n# myproject/settings.py 目前的檔案位置 INSTALLED_APPS = [ # 其他應用 \u0026#39;django.contrib.auth\u0026#39;, \u0026#39;django.contrib.contenttypes\u0026#39;, \u0026#39;django.contrib.sessions\u0026#39;, \u0026#39;django.contrib.messages\u0026#39;, \u0026#39;django.contrib.staticfiles\u0026#39;, \u0026#39;accounts\u0026#39;, # 新增 accounts 應用 ] 2. 使用 Django 內建的 UserCreationForm # 在 accounts/forms.py 建立表單：\nfrom django import forms from django.contrib.auth.forms import UserCreationForm from django.contrib.auth.models import User class SignUpForm(UserCreationForm): email = forms.EmailField(required=True) class Meta: model = User fields = (\u0026#39;username\u0026#39;, \u0026#39;email\u0026#39;, \u0026#39;password1\u0026#39;, \u0026#39;password2\u0026#39;) 這個表單包含使用者名稱、Email、以及兩次密碼（用來確認密碼正確）。\nDjango 提供了內建的 用戶驗證系統 (Authentication System)\n讓開發者能快速建立用戶註冊、登入、權限管理等功能。\n這個系統內建在 django.contrib.auth 中\n包含User 模型、表單(forms)、視圖（views）和工具函示\n現在使用的UserCreationForm也有內建一些重要功能\n欄位設定 # username：使用者名稱。 password1：密碼輸入欄位。 password2：再次輸入密碼，用於確認兩次密碼相同。 內建驗證 # 密碼匹配：自動檢查 password1 和 password2 是否一致。 密碼強度：如果有設定密碼政策（例如最少字元、特殊字元等），UserCreationForm 會進行檢查。 使用者名稱唯一性：檢查 username 是否已經被使用。 而我們在其中手動加入了 email 欄位\n並且使用**forms.EmailField(required=True)**設定為必填\n3. 建立用戶註冊 View # 在 accounts/views.py 中建立：\nfrom django.shortcuts import render, redirect from django.contrib.auth import login from .forms import SignUpForm def signup_view(request): if request.method == \u0026#39;POST\u0026#39;: form = SignUpForm(request.POST) if form.is_valid(): user = form.save() login(request, user) # 註冊後自動登入 return redirect(\u0026#39;home\u0026#39;) else: form = SignUpForm() return render(request, \u0026#39;accounts/signup.html\u0026#39;, {\u0026#39;form\u0026#39;: form}) 匯入的模組 # render：用來將資料與模板結合，返回 HTML 頁面 redirect：用來在成功註冊後，導向使用者到其他頁面（例如 home 頁面） login：Django 內建的登入方法，會將用戶標記為已登入狀態並建立 session SignUpForm：自訂的註冊表單(上一步我們建立的表單) 視圖邏輯 # 如果是 POST 請求，驗證表單並檢查是否符合規範後註冊新用戶 註冊成功後，使用 login() 自動登入新用戶並導向 home 頁面 如果是 GET 請求，顯示註冊表單 4. 建立登入與登出 View # 在 accounts/views.py 中使用內建的登入與登出 View：\nfrom django.contrib.auth.views import LoginView, LogoutView class CustomLoginView(LoginView): template_name = \u0026#39;accounts/login.html\u0026#39; class CustomLogoutView(LogoutView): next_page = \u0026#39;home\u0026#39; # 登出後導向首頁 5. 設定 URL # 在 accounts/urls.py 中設定路由：\nfrom django.urls import path from .views import signup_view, CustomLoginView, CustomLogoutView urlpatterns = [ path(\u0026#39;signup/\u0026#39;, signup_view, name=\u0026#39;signup\u0026#39;), path(\u0026#39;login/\u0026#39;, CustomLoginView.as_view(), name=\u0026#39;login\u0026#39;), path(\u0026#39;logout/\u0026#39;, CustomLogoutView.as_view(), name=\u0026#39;logout\u0026#39;), ] 再把 accounts/urls.py 加到專案核心的 urls.py：\nfrom django.contrib import admin from django.urls import path, include from django.shortcuts import render def home(request): return render(request, \u0026#39;home.html\u0026#39;) urlpatterns = [ path(\u0026#39;admin/\u0026#39;, admin.site.urls), path(\u0026#39;\u0026#39;, home, name=\u0026#39;home\u0026#39;), path(\u0026#39;accounts/\u0026#39;, include(\u0026#39;accounts.urls\u0026#39;)), ] 6. 建立模板 # 接下來就可以依照自己想要的風格\n創建各個頁面的模板了！\n下面我會簡單製作幾個當作範例\n註冊頁面 # 頁面放在 accounts/templates/accounts/signup.html\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;zh-TW\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;用戶註冊\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;註冊帳號\u0026lt;/h1\u0026gt; \u0026lt;form method=\u0026#34;post\u0026#34;\u0026gt; {% csrf_token %} {{ form.as_p }} \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;註冊\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;p\u0026gt;已經有帳號了？\u0026lt;a href=\u0026#34;{% url \u0026#39;login\u0026#39; %}\u0026#34;\u0026gt;登入\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 登入頁面 # 頁面放在 accounts/templates/accounts/login.html\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;zh-TW\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;用戶登入\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;登入\u0026lt;/h1\u0026gt; \u0026lt;form method=\u0026#34;post\u0026#34;\u0026gt; {% csrf_token %} {{ form.as_p }} \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;登入\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;p\u0026gt;還沒有帳號？\u0026lt;a href=\u0026#34;{% url \u0026#39;signup\u0026#39; %}\u0026#34;\u0026gt;註冊\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 首頁 # 頁面放在templates/home.html\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;zh-TW\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;首頁\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;歡迎來到我的網站！\u0026lt;/h1\u0026gt; {% if user.is_authenticated %} \u0026lt;p\u0026gt;嗨，{{ user.username }}！\u0026lt;a href=\u0026#34;{% url \u0026#39;logout\u0026#39; %}\u0026#34;\u0026gt;登出\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; {% else %} \u0026lt;p\u0026gt; \u0026lt;a href=\u0026#34;{% url \u0026#39;login\u0026#39; %}\u0026#34;\u0026gt;登入\u0026lt;/a\u0026gt; 或 \u0026lt;a href=\u0026#34;{% url \u0026#39;signup\u0026#39; %}\u0026#34;\u0026gt;註冊\u0026lt;/a\u0026gt; \u0026lt;/p\u0026gt; {% endif %} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 7. 設定登入後導向 # 最後我們在settings.py中加入登入登出後的導向頁面\nLOGIN_REDIRECT_URL = \u0026#39;home\u0026#39; # 登入成功後導向首頁 LOGOUT_REDIRECT_URL = \u0026#39;home\u0026#39; # 登出後導向首頁 8. 總結 # 這樣我們就完成了基本的用戶註冊、登入功能\n如果有任何問題或想法，歡迎在留言區討問！\n下一篇文章將繼續實作 忘記密碼功能，讓我們的網站開始運作！\n","date":"2025-02-25","externalUrl":null,"permalink":"/bukunblog/docs/django-user-authentication/","section":"文章","summary":"","title":"[Django]建立網站第一步：製作用戶註冊與登入功能","type":"docs"},{"content":"","date":"2025-02-25","externalUrl":null,"permalink":"/bukunblog/categories/django/","section":"📂分類","summary":"","title":"Django","type":"categories"},{"content":"","date":"2025-02-25","externalUrl":null,"permalink":"/bukunblog/tags/web-%E6%87%89%E7%94%A8/","section":"🏷️標籤","summary":"","title":"Web 應用","type":"tags"},{"content":"","date":"2025-02-25","externalUrl":null,"permalink":"/bukunblog/tags/%E7%94%A8%E6%88%B6%E9%A9%97%E8%AD%89/","section":"🏷️標籤","summary":"","title":"用戶驗證","type":"tags"},{"content":"","date":"2025-02-25","externalUrl":null,"permalink":"/bukunblog/series/%E8%A8%BB%E5%86%8A%E7%99%BB%E5%85%A5/","section":"Series","summary":"","title":"註冊登入","type":"series"},{"content":"最近在學習軟體中\n覺得刷 leetcode 好像是必經的過程\n只好踏入這令人頭痛的荊棘之路\u0026hellip;\n沒想到每一題都讓我不知道從何起手\n所以我決定每寫完一題都要進行記錄並且學習其他最優解！\n題目介紹：1.Two Sum # LeetCode 的第一題 Two Sum 是經典的基礎演算法題\n考察數組遍歷、哈希表（Hash Table）的應用\n以及時間複雜度優化的能力。\n題目描述 # 給定一個整數數組 nums 和一個目標值 target，請在該數組中找出和為目標值的兩個數，並返回它們的索引。\n你可以假設每個輸入都只會有一組有效解，但同一個元素不能被重複使用。\n範例 1：\nnums = [2, 7, 11, 15] target = 9 輸出：\n[0, 1] 因為 nums[0] + nums[1] == 9，所以返回 [0, 1]。\n應用概念 # 在解這道題之前，我們需要了解幾個核心概念：\n數組遍歷（Array Iteration） 我們需要遍歷數組來尋找兩個數字，使它們的總和等於 target。 哈希表（Hash Table） 使用字典（dict）可以快速查找數字是否已經存在，提高查找效率。 時間複雜度 暴力解法（O(n²)） 需要雙重迴圈，效率較低。 哈希表解法（O(n)） 透過字典來記錄數值和索引，一次遍歷即可完成查找。 初步解析 # 問了 chatgpt 後\n才知道有很多不同種的解法\n以下為範例的兩種\n解法 1：暴力解法（Brute Force，O(n²)） # 思路 # 這是我思考了半小時後才想到的笨方法\u0026hellip;\n使用雙重迴圈，針對 nums 中的每個數 nums[i]\n去檢查 nums[j] 是否能與之相加得到 target。\n並在最後輸出[i,j]\n其中的range(len(nums))指讓 i 運行這個串列的長度的次數的意思\n程式碼 # def two_sum(nums, target): for i in range(len(nums)): # 第一層遍歷 for j in range(i + 1, len(nums)): # 第二層遍歷 if nums[i] + nums[j] == target: return [i, j] return [] 時間複雜度 # 內外兩層迴圈，每層最多需要 n 次運算，所以總共 O(n²)。 缺點：對於大數據集合，效率較低。 解法 2：哈希表解法（Hash Table，O(n)） # 思路 # 為了加快查找速度，我們可以使用 dict 來儲存數字與其索引值。\n這樣在遍歷數組時，可以在 O(1) 的時間內查找是否已經有對應的數值。\n程式碼 # def two_sum(nums, target): num_dict = {} # 建立一個哈希表來儲存數值與索引 for i, num in enumerate(nums): complement = target - num # 需要的數值 if complement in num_dict: # 查詢哈希表 return [num_dict[complement], i] num_dict[num] = i # 加入哈希表 return [] 解釋 # 建立一個字典 num_dict 來存放數值和索引。\n遍歷 nums，對於每個 num，計算它對應的補數 complement = target - num。\n如果 complement 在 num_dict 中，代表我們已經找到答案，直接回傳索引。\n否則，把當前數字 num 和它的索引 i 存入 num_dict。\n時間複雜度 # O(n)：只需要一次遍歷，查找 dict 是 O(1)。 最終總結 # 方法 時間複雜度 是否需要額外空間 適用場景 暴力解法 O(n²) 否 數據量小時可用 哈希表解法 O(n) 需要 O(n) 的額外空間 最佳方案，適合所有情況 雙指針解法 O(n log n)（需排序） 否 數組已排序時最佳 最佳解法 # 哈希表解法是最推薦的方法，因為它的時間複雜度是 O(n)。 以上是我目前解題的思路\n其實自己對於解法 2 的哈希表也還在理解中\n未來還會繼續嘗試寫 leetcode 的題目\n但應該都是先從簡單開始練手\u0026hellip;\n有問題歡迎留言討論！\n","date":"2025-02-16","externalUrl":null,"permalink":"/bukunblog/docs/leetcode-twosum/","section":"文章","summary":"","title":"[Leetcode]第1題Two sum的解法與思路","type":"docs"},{"content":"","date":"2025-02-16","externalUrl":null,"permalink":"/bukunblog/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/","section":"🏷️標籤","summary":"","title":"哈希表","type":"tags"},{"content":"在 Web 開發中，CRUD（Create、Read、Update、Delete） 是最基本的操作，其中 D（Delete） 代表「刪除資料」。\n這篇文章會帶你學習 Django View、Template，並建立 文章刪除功能。\n1. 設定 Model（資料庫模型） # 在前一篇 Django CRUD - Update 中，我們已經建立了 Post Model。\n如果你還沒設定，請先參考前面的文章。\nfrom django.db import models class Post(models.Model): title = models.CharField(max_length=200) content = models.TextField() created_at = models.DateTimeField(auto_now_add=True) updated_at = models.DateTimeField(auto_now=True) def __str__(self): return self.title 2. 建立刪除 View # 我們需要建立一個 View，負責處理文章刪除。\n在 blog/views.py 加入：\nfrom django.shortcuts import render, get_object_or_404, redirect from .models import Post def delete_post(request, post_id): post = get_object_or_404(Post, id=post_id) if request.method == \u0026#34;POST\u0026#34;: post.delete() return redirect(\u0026#39;post_list\u0026#39;) return render(request, \u0026#39;blog/delete_post.html\u0026#39;, {\u0026#39;post\u0026#39;: post}) 這個 View 的流程：\n取得要刪除的文章，如果不存在則回傳 404。 GET 請求：顯示確認刪除的頁面。 POST 請求：刪除文章，並導向文章列表。 3. 建立 HTML 模板 # 在 blog/templates/blog/delete_post.html 建立模板：\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;zh-TW\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;刪除文章\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;刪除文章 - {{ post.title }}\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;確定要刪除此文章嗎？\u0026lt;/p\u0026gt; \u0026lt;form method=\u0026#34;post\u0026#34;\u0026gt; {% csrf_token %} \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;確認刪除\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;a href=\u0026#34;{% url \u0026#39;post_list\u0026#39; %}\u0026#34;\u0026gt;取消\u0026lt;/a\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 這樣使用者會看到刪除確認頁面，避免誤刪資料。\n4. 設定 URL # 我們需要設定 URL，讓 delete_post View 可以被訪問。\n在 blog/urls.py 加入：\nfrom django.urls import path from .views import post_list, post_detail, update_post, delete_post urlpatterns = [ path(\u0026#39;\u0026#39;, post_list, name=\u0026#39;post_list\u0026#39;), path(\u0026#39;post/\u0026lt;int:post_id\u0026gt;/\u0026#39;, post_detail, name=\u0026#39;post_detail\u0026#39;), path(\u0026#39;post/\u0026lt;int:post_id\u0026gt;/edit/\u0026#39;, update_post, name=\u0026#39;update_post\u0026#39;), path(\u0026#39;post/\u0026lt;int:post_id\u0026gt;/delete/\u0026#39;, delete_post, name=\u0026#39;delete_post\u0026#39;), ] 現在可以在 http://127.0.0.1:8000/post/1/delete/ 進行文章刪除。\n5. 在文章列表加上「刪除」按鈕 # 為了讓使用者更方便刪除文章，我們需要修改 post_list.html。\n在 blog/templates/blog/post_list.html 更新：\n\u0026lt;ul\u0026gt; {% for post in posts %} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{% url \u0026#39;post_detail\u0026#39; post.id %}\u0026#34;\u0026gt;{{ post.title }}\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;{% url \u0026#39;update_post\u0026#39; post.id %}\u0026#34;\u0026gt;編輯\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;{% url \u0026#39;delete_post\u0026#39; post.id %}\u0026#34;\u0026gt;刪除\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {% endfor %} \u0026lt;/ul\u0026gt; 這樣每篇文章旁邊就會有 「刪除」按鈕。\n6. 總結 # 這篇文章介紹了 Django 中的 CRUD - Delete（刪除資料），並透過 Model、View、Template 來完成 文章刪除功能。\n✔ 設定 View，處理刪除請求\n✔ 建立 HTML 模板，顯示刪除確認頁面\n✔ 設定 URL，讓功能可供訪問\n✔ 在文章列表頁面加上「刪除」按鈕\n至此，我們已經完成了 Django CRUD（Create、Read、Update、Delete） 的完整功能！\n如果有任何問題歡迎下面留言討論！\n","date":"2025-02-12","externalUrl":null,"permalink":"/bukunblog/docs/django-crud-delete/","section":"文章","summary":"","title":"[Django]介紹 CRUD：刪除 D（Delete）最終章！","type":"docs"},{"content":"","date":"2025-02-12","externalUrl":null,"permalink":"/bukunblog/tags/crud/","section":"🏷️標籤","summary":"","title":"CRUD","type":"tags"},{"content":"","date":"2025-02-12","externalUrl":null,"permalink":"/bukunblog/series/crud/","section":"Series","summary":"","title":"CRUD","type":"series"},{"content":"在 Web 開發中，CRUD（Create、Read、Update、Delete） 是最基本的操作，其中 U（Update） 代表「更新資料」。\n這篇文章會帶你學習 Django Form、View 與 Template，並建立 文章編輯功能。\n1. 設定 Model（資料庫模型） # 在前一篇 Django CRUD - Read 中，我們已經建立了 Post Model。\n如果你還沒設定，請先參考前兩篇文章。\nfrom django.db import models class Post(models.Model): title = models.CharField(max_length=200) content = models.TextField() created_at = models.DateTimeField(auto_now_add=True) updated_at = models.DateTimeField(auto_now=True) def __str__(self): return self.title 這裡新增了 updated_at 欄位，讓 Django 自動記錄資料更新時間。\n2. 建立 Django 表單（Forms） # 為了讓使用者能夠編輯文章，我們需要建立 Django Form。\n在 blog/forms.py 加入：\nfrom django import forms from .models import Post class PostForm(forms.ModelForm): class Meta: model = Post fields = [\u0026#39;title\u0026#39;, \u0026#39;content\u0026#39;] 這樣 Django 會根據 Post Model 自動產生表單。\n3. 建立更新 View # 我們需要建立一個 View，負責處理文章編輯。\n在 blog/views.py 加入：\nfrom django.shortcuts import render, get_object_or_404, redirect from .models import Post from .forms import PostForm def update_post(request, post_id): post = get_object_or_404(Post, id=post_id) if request.method == \u0026#34;POST\u0026#34;: form = PostForm(request.POST, instance=post) if form.is_valid(): form.save() return redirect(\u0026#39;post_detail\u0026#39;, post_id=post.id) else: form = PostForm(instance=post) return render(request, \u0026#39;blog/update_post.html\u0026#39;, {\u0026#39;form\u0026#39;: form, \u0026#39;post\u0026#39;: post}) 這個 View 的流程：\n取得要編輯的文章，如果不存在則回傳 404。 GET 請求：顯示表單，並將 Post 的資料填入。 POST 請求：接收使用者輸入並儲存更新後的內容。 重新導向：編輯成功後，返回文章詳細頁面。 4. 建立 HTML 模板 # 在 blog/templates/blog/update_post.html 建立模板：\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;zh-TW\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;編輯文章\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;編輯文章 - {{ post.title }}\u0026lt;/h1\u0026gt; \u0026lt;form method=\u0026#34;post\u0026#34;\u0026gt; {% csrf_token %} {{ form.as_p }} \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;更新\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;a href=\u0026#34;{% url \u0026#39;post_detail\u0026#39; post.id %}\u0026#34;\u0026gt;取消\u0026lt;/a\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 這樣就可以顯示表單，讓使用者編輯文章。\n5. 設定 URL # 我們需要設定 URL，讓 update_post View 可以被訪問。\n在 blog/urls.py 加入：\nfrom django.urls import path from .views import post_list, post_detail, update_post urlpatterns = [ path(\u0026#39;\u0026#39;, post_list, name=\u0026#39;post_list\u0026#39;), path(\u0026#39;post/\u0026lt;int:post_id\u0026gt;/\u0026#39;, post_detail, name=\u0026#39;post_detail\u0026#39;), path(\u0026#39;post/\u0026lt;int:post_id\u0026gt;/edit/\u0026#39;, update_post, name=\u0026#39;update_post\u0026#39;), ] 現在可以在 http://127.0.0.1:8000/post/1/edit/ 進行文章編輯。\n6. 在文章列表加上「編輯」按鈕 # 為了讓使用者更方便進入編輯頁面，我們需要修改 post_list.html。\n在 blog/templates/blog/post_list.html 更新：\n\u0026lt;ul\u0026gt; {% for post in posts %} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{% url \u0026#39;post_detail\u0026#39; post.id %}\u0026#34;\u0026gt;{{ post.title }}\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;{% url \u0026#39;update_post\u0026#39; post.id %}\u0026#34;\u0026gt;編輯\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {% endfor %} \u0026lt;/ul\u0026gt; 這樣每篇文章旁邊就會有 「編輯」按鈕。\n7. 總結 # 這篇文章介紹了 Django 中的 CRUD - Update（更新資料），並透過 Model、Form、View、Template 來完成 文章編輯功能。\n✔ 建立 Django Form，讓使用者編輯資料\n✔ 設定 View，處理表單提交並更新資料庫\n✔ 建立 HTML 模板，顯示輸入表單\n✔ 設定 URL，讓功能可供訪問\n✔ 在文章列表頁面加上「編輯」按鈕\n下一篇文章會介紹 Django CRUD - Delete（刪除資料），讓我們學習如何刪除文章！\n如果有任何問題歡迎下面留言討論！\n","date":"2025-02-12","externalUrl":null,"permalink":"/bukunblog/docs/django-crud-update/","section":"文章","summary":"","title":"[Django]介紹 CRUD：更新 U（Update），讓文章可以編輯吧！","type":"docs"},{"content":"在 Web 開發中，CRUD（Create、Read、Update、Delete） 是最基本的操作，其中 R（Read） 代表「讀取資料」。\n這篇文章會帶你學習 Django QuerySet、ListView、DetailView，並在前端顯示資料。\n1. 設定 Model（資料庫模型） # 在前一篇 Django CRUD - Create 中，我們已經建立了 Post Model。\n如果你還沒設定，請先參考上一篇文章。\nfrom django.db import models class Post(models.Model): title = models.CharField(max_length=200) content = models.TextField() created_at = models.DateTimeField(auto_now_add=True) def __str__(self): return self.title 2. 在 Django Shell 測試讀取資料 # 如果你的資料庫已經有資料，可以使用 Django Shell 來測試讀取：\npython manage.py shell 進入 Django Shell 後，輸入：\nfrom blog.models import Post # 取得所有文章 posts = Post.objects.all() print(posts) # 取得單一文章 post = Post.objects.get(id=1) print(post.title, post.content) 這樣就能透過 Django ORM 來 讀取資料。\n3. 建立文章列表頁面（ListView） # 現在我們來建立一個頁面，顯示所有的文章列表。\n步驟 1：設定 View # 在 blog/views.py 加入：\nfrom django.shortcuts import render from .models import Post def post_list(request): posts = Post.objects.all() # 取得所有文章 return render(request, \u0026#39;blog/post_list.html\u0026#39;, {\u0026#39;posts\u0026#39;: posts}) 這個 View 會：\n從資料庫取得所有文章 傳遞給模板（post_list.html）來渲染頁面 步驟 2：建立 HTML 模板 # 在 blog/templates/blog/post_list.html 建立模板：\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;zh-TW\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;文章列表\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;文章列表\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt; {% for post in posts %} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{% url \u0026#39;post_detail\u0026#39; post.id %}\u0026#34;\u0026gt;{{ post.title }}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {% endfor %} \u0026lt;/ul\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 這樣每篇文章的標題都會顯示在頁面上，並且加上 連結 指向詳細內容頁面。\n步驟 3：設定 URL # 在 blog/urls.py 加入：\nfrom django.urls import path from .views import post_list urlpatterns = [ path(\u0026#39;\u0026#39;, post_list, name=\u0026#39;post_list\u0026#39;), ] 現在可以在 http://127.0.0.1:8000/ 查看文章列表。\n4. 建立文章詳細頁面（DetailView） # 步驟 1：設定 View # 在 blog/views.py 加入：\nfrom django.shortcuts import render, get_object_or_404 from .models import Post def post_detail(request, post_id): post = get_object_or_404(Post, id=post_id) return render(request, \u0026#39;blog/post_detail.html\u0026#39;, {\u0026#39;post\u0026#39;: post}) 這個 View 會：\n根據 post_id 取得特定文章 如果文章不存在，回傳 404 錯誤 傳遞給模板（post_detail.html）來渲染頁面 步驟 2：建立 HTML 模板 # 在 blog/templates/blog/post_detail.html 建立模板：\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;zh-TW\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;{{ post.title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;{{ post.title }}\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;{{ post.content }}\u0026lt;/p\u0026gt; \u0026lt;a href=\u0026#34;{% url \u0026#39;post_list\u0026#39; %}\u0026#34;\u0026gt;回到文章列表\u0026lt;/a\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 這樣我們就可以顯示文章的詳細內容。\n步驟 3：設定 URL # 在 blog/urls.py 加入：\nfrom django.urls import path from .views import post_list, post_detail urlpatterns = [ path(\u0026#39;\u0026#39;, post_list, name=\u0026#39;post_list\u0026#39;), path(\u0026#39;post/\u0026lt;int:post_id\u0026gt;/\u0026#39;, post_detail, name=\u0026#39;post_detail\u0026#39;), ] 現在可以在 http://127.0.0.1:8000/post/1/ 查看 第一篇文章的詳細內容。\n5. 總結 # 這篇文章介紹了 Django 中的 CRUD - Read（讀取資料），並透過 Model、View、Template 來完成資料的讀取與顯示。\n✔ 使用 Django ORM 讀取資料\n✔ 建立文章列表頁面，顯示所有文章\n✔ 建立文章詳細頁面，顯示單篇文章內容\n✔ 設定 URL 來對應不同頁面\n下一篇文章會介紹 Django CRUD - Update（更新資料），讓我們學習如何編輯與修改文章內容！\n如果有任何問題歡迎下面留言討論！\n","date":"2025-02-12","externalUrl":null,"permalink":"/bukunblog/docs/django-crud-read/","section":"文章","summary":"","title":"[Django]介紹 CRUD：讀取 R（Read）是什麼？","type":"docs"},{"content":"在 Web 開發中，CRUD（Create、Read、Update、Delete） 是最基本的操作，其中 C（Create） 代表「建立資料」。\n這篇文章會帶你從 Django Model、Form 到 View，完整學習如何在 Django 中建立資料，並透過 Django Admin 與表單 來處理新增資料的需求。\n1. 設定 Model（資料庫模型） # Django 使用 ORM（Object-Relational Mapping） 來處理資料庫，所有的資料表都是透過 models.py 來定義的。\n假設我們要建立「部落格文章」，在 blog/models.py 加入：\nfrom django.db import models class Post(models.Model): title = models.CharField(max_length=200) # 文章標題 content = models.TextField() # 文章內容 created_at = models.DateTimeField(auto_now_add=True) # 自動存入建立時間 def __str__(self): return self.title # 在 Django Admin 顯示文章標題 2. 建立資料庫遷移並套用 # 當 Model 設定完成後，Django 需要同步資料庫。\n步驟 1：產生遷移檔 # python manage.py makemigrations 這個指令會在 blog/migrations/ 內產生遷移檔，記錄我們對資料庫的變更。\n步驟 2：套用變更 # python manage.py migrate 這樣 Post Model 會正式建立成 資料表，可以開始儲存資料了。\n3. 在 Django Admin 內新增資料 # Django 內建 Admin 管理後台，讓我們可以方便地透過網頁介面新增資料。\n步驟 1：在 admin.py 註冊 Model # 在 blog/admin.py 加入：\nfrom django.contrib import admin from .models import Post admin.site.register(Post) # 註冊 Post 模型 步驟 2：建立管理員帳號 # 如果還沒有管理員帳號，可以執行：\npython manage.py createsuperuser 依照指示輸入 使用者名稱、電子郵件、密碼，然後啟動 Django 伺服器：\npython manage.py runserver 打開 http://127.0.0.1:8000/admin/，輸入剛剛建立的帳號密碼，就能在後台看到 Post 模型，並直接新增文章！\n4. 建立 Django 表單（Forms） # 雖然 Django Admin 很方便，但通常會在 網站前台 提供「新增文章」的表單，讓使用者輸入內容。\n在 blog/forms.py 建立 Django 表單：\nfrom django import forms from .models import Post class PostForm(forms.ModelForm): class Meta: model = Post # 指定對應的 Model fields = [\u0026#39;title\u0026#39;, \u0026#39;content\u0026#39;] # 設定顯示的欄位 這樣 Django 就會幫我們產生 HTML 表單，讓使用者輸入標題與內容。\n5. 建立 View 來處理表單提交 # 我們需要在 views.py 設定一個 View，負責顯示表單並處理提交的資料。\n在 blog/views.py 加入：\nfrom django.shortcuts import render, redirect from .forms import PostForm def create_post(request): if request.method == \u0026#34;POST\u0026#34;: form = PostForm(request.POST) if form.is_valid(): form.save() # 存入資料庫 return redirect(\u0026#39;post_list\u0026#39;) # 重新導向到文章列表頁 else: form = PostForm() return render(request, \u0026#39;blog/create_post.html\u0026#39;, {\u0026#39;form\u0026#39;: form}) 這個 View 的流程：\nGET 請求：顯示空的表單。 POST 請求：接收使用者輸入的標題與內容。 驗證表單：確保輸入內容有效。 存入資料庫：儲存新文章。 重新導向：導回文章列表頁面。 6. 建立 HTML 模板 # 在 blog/templates/blog/ 內建立 create_post.html，讓表單能顯示在前端。\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;zh-TW\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;新增文章\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;新增文章\u0026lt;/h1\u0026gt; \u0026lt;form method=\u0026#34;post\u0026#34;\u0026gt; {% csrf_token %} {{ form.as_p }} \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;提交\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 這樣就完成了一個基本的「新增文章」功能！\n7. 設定 URL # 最後，我們要在 urls.py 內設定 URL，讓 create_post View 能夠被訪問。\n在 blog/urls.py 加入：\nfrom django.urls import path from .views import create_post urlpatterns = [ path(\u0026#39;create/\u0026#39;, create_post, name=\u0026#39;create_post\u0026#39;), ] 這樣我們就可以在 http://127.0.0.1:8000/create/ 訪問 新增文章的頁面。\n8. 總結 # 這篇文章介紹了 Django 中的 CRUD - Create（新增資料），並透過 Model、Admin、Form、View、Template 來完成完整的「建立文章」功能。\n✔ 建立 Model，定義資料庫結構\n✔ 使用 Django Admin 直接新增資料\n✔ 建立 Django Form，讓使用者填寫資料\n✔ 設定 View，處理表單提交與存入資料庫\n✔ 建立 HTML 模板，顯示輸入表單\n✔ 設定 URL，讓功能可供訪問\n下一篇文章會繼續介紹 Django CRUD - Read（讀取資料），讓我們的文章能夠在前端正確顯示！\n如果有任何問題歡迎下面留言討論！\n","date":"2025-02-12","externalUrl":null,"permalink":"/bukunblog/docs/django-crud-create/","section":"文章","summary":"","title":"[Django]介紹CRUD：從 C（Create）開始","type":"docs"},{"content":"最近在開發一個 sideproject 接觸到了 Django\n因此邊做專案同時記錄一下相關問題與知識\n讓我們從零開始一起學習吧！\nDjango 是 Python 最受歡迎的 Web 框架之一\n提供 高效開發、強大的 ORM、內建管理介面、以及安全性機制\n適合快速開發可擴展的 Web 應用\nDjango 的優勢 # Django 之所以受到開發者喜愛，主要是因為它具備以下特點：\n✔ 快速開發 - 內建強大的管理介面，開發速度快\n✔ MVC 架構 - 遵循 Model-View-Controller（Django 稱為 MVT）\n✔ 強大 ORM - 內建的 Object-Relational Mapping 讓你不需要直接寫 SQL\n✔ 高度安全 - 內建 CSRF 防護、XSS 防護、SQL 注入防護\n✔ 可擴展性 - 支援模組化開發，易於擴展\n關於提到的 MVC、ORM 以及 CSRF 未來會寫文章補充\n本篇文章主要介紹 如何使用 Django 建立基本專案\n讓我們一起從環境設定到完成啟動伺服器！\n1. 安裝 Python # 在開始 Django 開發前，先確認已安裝 Python。\n檢查 Python 是否已安裝 # 在終端機或命令提示字元中輸入以下指令，檢查是否已安裝 Python：\npython --version 如果未顯示 Python 版本號，表示你的電腦尚未安裝 Python，前往 Python 官方網站 下載並安裝最新版本。\n安裝後，再次執行 python --version 確保已安裝成功。\n2. 設定虛擬環境並安裝 Django # 開發 Django 專案時，我建議使用虛擬環境\n這樣可以確保專案的可攜性與一致性\n讓未來共同開發時能確保協作人快速安裝依賴\n我這邊使用的是Poetry 來建立虛擬環境並管理依賴套件\n安裝 Poetry # 如果尚未安裝 Poetry，可以執行以下指令安裝：\ncurl -sSL https://install.python-poetry.org | python3 - 安裝後，請確認 Poetry 是否可用：\npoetry --version 建立專案與虛擬環境 # 使用 Poetry 來建立 Django 專案：\npoetry new mysite cd mysite poetry init 接著啟動虛擬環境並安裝 Django：\npoetry add django Poetry 會自動建立 pyproject.toml 與 poetry.lock 來管理相依套件。\n若要啟動 Poetry 虛擬環境：\npoetry shell 這時候，終端機前面應該會出現 (mysite)，表示已成功進入虛擬環境。\n之後記得每次開始修改專案前\n一定要先啟動虛擬環境！ 3. 建立 Django 專案 # 步驟 1：建立專案 # django-admin startproject mysite . 這會在當前資料夾內建立一個名為 mysite 的 Django 專案。\n步驟 2：專案結構 # mysite/ ├── manage.py # Django 管理指令 ├── mysite/ │ ├── __init__.py │ ├── settings.py # 設定檔 │ ├── urls.py # 路由設定 │ ├── asgi.py │ ├── wsgi.py │ ├── db.sqlite3 # SQLite 預設資料庫 4. 啟動 Django 伺服器 # 我們可以使用以下指令來啟動開發伺服器，確認專案是否成功運行。\npython manage.py runserver 若成功，終端機會顯示：\nStarting development server at http://127.0.0.1:8000/ 打開瀏覽器並輸入 http://127.0.0.1:8000/，你應該會看到 Django 的歡迎畫面。\n5. 建立 Django 應用程式 # Django 使用 應用程式 (App) 來組織程式碼，以下是建立應用程式的方式。\n未來如果要建立新的功能\n都要建立一個全新的 app 再進行整合\npython manage.py startapp blog 這會在專案內新增一個 blog/ 目錄，結構如下：\nblog/ ├── migrations/ # 資料庫遷移 ├── __init__.py ├── admin.py # Django 管理後台 ├── apps.py # 應用設定 ├── models.py # 資料庫模型 ├── tests.py # 測試 ├── views.py # 處理請求 接下來，記得在 mysite/settings.py 內註冊這個應用程式：\nINSTALLED_APPS = [ \u0026#39;django.contrib.admin\u0026#39;, \u0026#39;django.contrib.auth\u0026#39;, \u0026#39;django.contrib.contenttypes\u0026#39;, \u0026#39;django.contrib.sessions\u0026#39;, \u0026#39;django.contrib.messages\u0026#39;, \u0026#39;django.contrib.staticfiles\u0026#39;, \u0026#39;blog\u0026#39;, # 新增的應用程式 ] 6. 總結 # 這篇文章介紹了 如何使用 Django 建立專案，並完成基本環境設定。\n✔ 使用 Poetry 建立虛擬環境並安裝 Django\n✔ 使用 Django 建立專案\n✔ 啟動開發伺服器並確認 Django 運行正常\n✔ 建立 Django 應用程式並註冊到專案中\n下一篇文章將探討 Django 的 CRUD，讓我們的網站開始運作！\n如果有任何問題歡迎下面留言討論！\n","date":"2025-02-11","externalUrl":null,"permalink":"/bukunblog/docs/django-project-setup/","section":"文章","summary":"","title":"[Django]初步建置專案：跟我一起從零開始！","type":"docs"},{"content":"","date":"2025-02-11","externalUrl":null,"permalink":"/bukunblog/tags/mvc/","section":"🏷️標籤","summary":"","title":"MVC","type":"tags"},{"content":"","date":"2025-02-11","externalUrl":null,"permalink":"/bukunblog/tags/poetry/","section":"🏷️標籤","summary":"","title":"Poetry","type":"tags"},{"content":"本篇文章將介紹如何透過 Firebase Analytics，在文章顯示瀏覽次數。\n初步建置網站後覺得很想讓文章中顯示瀏覽量\n於是我研究了目前使用的主題的相關設置\n發現 Hugo Blowfish 主題提供了多種自訂功能，其中也支援 Firebase 來追蹤網站的瀏覽量。\n如果想知道更多設定請參閱Blowfish-Firebase 設置\n接下來我們一步一步進行設定\n1. 建立 Firebase 專案 # 如果還沒有 Firebase 帳戶，先前往 Firebase 官方網站 註冊並建立專案。\n步驟 1: 新增 Firebase 專案 # 登入 Firebase 控制台。 點擊 新增專案，輸入你的專案名稱。 選擇 不啟用 Google Analytics（如果只是用來統計瀏覽數量）。 完成專案建立。 步驟 2: 取得 Firebase 設定 # 進入 Firebase 專案後，點擊 專案設定。 在 常規設定 -\u0026gt; 你的應用程式，新增一個 Web 應用程式。 記下 Firebase Config 內的 API Key 及其他資訊。 2. 在 Hugo Blowfish 啟用 Firebase # 步驟 1: 新增 Firebase 設定至 params.toml # 在 Hugo 的 params.toml 檔案中加入 Firebase 設定：\n[params] apiKey = \u0026#34;您的 apiKey\u0026#34; authDomain = \u0026#34;您的 authDomain\u0026#34; projectId = \u0026#34;您的 projectId\u0026#34; storageBucket = \u0026#34;您的 storageBucket\u0026#34; messagingSenderId = \u0026#34;您的 messagingSenderId\u0026#34; appId = \u0026#34;您的 appId\u0026#34; measurementId = \u0026#34;您的 measurementId\u0026#34; 步驟 2: 修改 article 設定 # 在 Hugo 的 params.toml 檔案中找到 article 相關\n並將瀏覽量設定打開\n[article] showViews = true #預設回false showLikes = false #如果想開也可以調整成true 3. 設定文章瀏覽數統計 # 步驟 1: 建立 Firestore 資料庫 # 在 Firebase 控制台，進入 Firestore Database。 選擇 啟用 Firestore。 點選 Role 將代碼置換成如下\nrules_version = \u0026#39;2\u0026#39;; service cloud.firestore { match /databases/{database}/documents { match /{document=**} { allow read, write: if request.auth != null; } } } 步驟 2: 建立 Authentication # 在 Firebase 控制台，點選建置，進入 Authentication 點選建立，並且將使用者改為匿名 4. 總結 # 現在網站就已成功整合 Firebase，並能夠顯示每篇文章的瀏覽次數。\n啟動網站看看是否有成功！\nhugo server --disableFastRender 這不僅能幫助了解讀者行為，也能增加互動性\n若是有其他主題也想增加瀏覽量按鈕\n歡迎留言提出，我會再後續增加通用的瀏覽量觀看方式！\n","date":"2025-02-10","externalUrl":null,"permalink":"/bukunblog/docs/hugo-blowfish-firebase-views/","section":"文章","summary":"","title":"[Hugo]啟用 Firebase 以顯示瀏覽量","type":"docs"},{"content":"","date":"2025-02-10","externalUrl":null,"permalink":"/bukunblog/tags/blowfish/","section":"🏷️標籤","summary":"","title":"Blowfish","type":"tags"},{"content":"","date":"2025-02-10","externalUrl":null,"permalink":"/bukunblog/tags/firebase/","section":"🏷️標籤","summary":"","title":"Firebase","type":"tags"},{"content":"","date":"2025-02-10","externalUrl":null,"permalink":"/bukunblog/series/hugo/","section":"Series","summary":"","title":"Hugo","type":"series"},{"content":"","date":"2025-02-10","externalUrl":null,"permalink":"/bukunblog/categories/hugo/","section":"📂分類","summary":"","title":"Hugo","type":"categories"},{"content":"","date":"2025-02-10","externalUrl":null,"permalink":"/bukunblog/tags/%E7%B6%B2%E7%AB%99%E5%88%86%E6%9E%90/","section":"🏷️標籤","summary":"","title":"網站分析","type":"tags"},{"content":"","date":"2025-02-10","externalUrl":null,"permalink":"/bukunblog/tags/%E7%B6%B2%E7%AB%99%E9%96%8B%E7%99%BC/","section":"🏷️標籤","summary":"","title":"網站開發","type":"tags"},{"content":"Hugo 本身是一個靜態網站生成器，不具備內建的評論系統，但可以透過第三方服務來加入評論功能。\n本篇文章會介紹幾種常見的方法，可以在你的 Hugo 網站上留言與互動。\n1. 使用 Disqus # Disqus 是最常見的靜態網站評論系統之一，支援即時留言、垃圾訊息過濾與社群互動。\n步驟 1: 註冊 Disqus 帳號並建立網站 # 前往 Disqus 註冊帳號。 建立一個新的網站，並記下 Shortname (例如 my-hugo-site)。 步驟 2: 設定 Hugo # 在 config.toml 中加入以下內容：\n[params] disqusShortname = \u0026#34;my-hugo-site\u0026#34; [article] showComments = true 步驟 3: 驗證評論是否顯示 # 執行 Hugo 本地伺服器：\nhugo server -D 注意：Disqus 需要 正式部署後 才能正常顯示。\n2. 使用 Utterances (GitHub Issue 評論系統) # 如果你的 Hugo 網站是放在 GitHub Pages 上，Utterances 是一個很棒的免費選擇。\n它會將每篇文章的評論儲存在 GitHub Issue 中，適合技術部落格。\n步驟 1: 安裝 Utterances # 前往 Utterances 並安裝 GitHub App。 選擇一個用於儲存評論的 GitHub Repository。 步驟 2: 在 Hugo 加入 Utterances # 在 layouts/partials/comments.html 新增以下內容：\n\u0026lt;script src=\u0026#34;https://utteranc.es/client.js\u0026#34; repo=\u0026#34;your-username/your-repository\u0026#34; issue-term=\u0026#34;title\u0026#34; theme=\u0026#34;github-light\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; async \u0026gt;\u0026lt;/script\u0026gt; 步驟 3: 在文章模板內引入評論 # 編輯 layouts/_default/single.html，在適當位置加入：\n{{ if .Params.comments }} {{ partial \u0026#34;comments.html\u0026#34; . }} {{ end }} 然後在 config.toml 內啟用：\n[params] enableComments = true 3. 使用 Giscus (GitHub Discussions 評論系統) # Giscus 是一個基於 GitHub Discussions 的評論系統，運作方式類似 Utterances。\n步驟 1: 設定 Giscus # 前往 Giscus 設定你的 GitHub Repository。 選擇 Discussion Category。 複製生成的 \u0026lt;script\u0026gt; 代碼。 步驟 2: 在 Hugo 中加入 Giscus # 在 layouts/partials/comments.html 新增：\n\u0026lt;script src=\u0026#34;https://giscus.app/client.js\u0026#34; data-repo=\u0026#34;your-username/your-repository\u0026#34; data-repo-id=\u0026#34;YOUR_REPO_ID\u0026#34; data-category=\u0026#34;YOUR_CATEGORY\u0026#34; data-category-id=\u0026#34;YOUR_CATEGORY_ID\u0026#34; data-mapping=\u0026#34;pathname\u0026#34; data-strict=\u0026#34;0\u0026#34; data-reactions-enabled=\u0026#34;1\u0026#34; data-emit-metadata=\u0026#34;0\u0026#34; data-input-position=\u0026#34;bottom\u0026#34; data-theme=\u0026#34;light\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; async \u0026gt;\u0026lt;/script\u0026gt; 然後在文章內啟用：\n[params] enableComments = true 4. 總結 # Disqus：適合一般部落格，簡單好用，但可能有廣告。 Utterances：適合技術部落格，留言儲存在 GitHub Issue，完全免費。 Giscus：基於 GitHub Discussions，適合開發者社群使用。 我個人是使用 Disqus，因為他設定簡單且快速好用。\n這些方法都能讓 Hugo 網站擁有留言功能\n選擇適合你的解決方案，讓網站與讀者有更多互動吧！\n如果有任何問題也歡迎下面留言討論！\n","date":"2025-02-09","externalUrl":null,"permalink":"/bukunblog/docs/hugo-comments/","section":"文章","summary":"","title":"[Hugo]如何在網站加入留言功能","type":"docs"},{"content":"","date":"2025-02-09","externalUrl":null,"permalink":"/bukunblog/tags/disqus/","section":"🏷️標籤","summary":"","title":"Disqus","type":"tags"},{"content":"","date":"2025-02-09","externalUrl":null,"permalink":"/bukunblog/tags/%E7%95%99%E8%A8%80%E7%B3%BB%E7%B5%B1/","section":"🏷️標籤","summary":"","title":"留言系統","type":"tags"},{"content":"","date":"2025-02-09","externalUrl":null,"permalink":"/bukunblog/tags/%E9%9D%9C%E6%85%8B%E7%B6%B2%E7%AB%99/","section":"🏷️標籤","summary":"","title":"靜態網站","type":"tags"},{"content":"很多人在使用 GitHub Pages 建立 Hugo 網站後，發現自己的網站在 Google 上搜尋不到。\n包含我一開始也在思考這個問題該怎麼解決！\n這篇文章會介紹 如何讓 Google 索引你的 GitHub Pages，提升網站能見度，讓更多人能夠找到你的內容。\n1. 確保 GitHub Pages 設定正確 # 首先，請確認你的 GitHub Pages 已經部署成功，並且網站可以正常訪問。\n進入你的 GitHub Repository → Settings → Pages 確保 Source 設定為 Deploy from a branch 或 GitHub Actions 網站 URL (如 https://yourusername.github.io/) 需要能夠正常開啟 確認 GitHub Pages 部署正常後，繼續以下步驟。\n2. 允許搜尋引擎索引網站 # 在 Hugo 的 config.toml 或 hugo.toml 內確認 robots.txt 允許 Google 抓取網站。\n檢查 robots.txt # Hugo 預設會產生 robots.txt\n通常檔案最終生成位置會在public/robots.txt\n以 blowfish 主題為例，在config/_default/hugo.toml中\n有以下設定\nenableRobotsTXT = false #預設為true 我會建議把上述設定改成 false\n因為主題預設的設定檔會讓 google 爬蟲沒辦法順利運行\n我們可以手動設定。\n新增 static/robots.txt，內容如下：\nUser-agent: * Allow: / Sitemap: https://yourusername.github.io/sitemap.xml 這樣會允許所有搜尋引擎索引你的網站，並提供 sitemap 方便 Google 抓取內容。\n3. 產生 sitemap.xml # Google 會透過 網站地圖 (sitemap.xml) 來了解你的網站結構。\nHugo 內建支援 sitemap.xml，只需確保 config.toml 內啟用了 sitemap。\n[outputs] home = [\u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;SITEMAP\u0026#34;] 如果你已經啟用 sitemap，開啟 https://yourusername.github.io/sitemap.xml 確認是否正確生成。\n4. 提交網站到 Google Search Console # 1. 前往 Google Search Console # 開啟 Google Search Console 並登入 Google 帳戶。\n2. 新增你的網站 # 選擇 網址前綴 (URL Prefix) 輸入你的 GitHub Pages 網址 (例如 https://yourusername.github.io/) 按 繼續 3. 驗證網站所有權 # 如果你的網址是 https://yourusername.github.io/，可以使用 HTML 標籤驗證\n在 Google Search Console 內選擇 HTML 標籤驗證 取得 meta 標籤，例如： \u0026lt;meta name=\u0026#34;google-site-verification\u0026#34; content=\u0026#34;your-verification-code\u0026#34; /\u0026gt; 在 Hugo 的 layouts/partials/head.html 內加入這段程式碼： {{ if .Site.Params.googleSiteVerification }} \u0026lt;meta name=\u0026#34;google-site-verification\u0026#34; content=\u0026#34;{{ .Site.Params.googleSiteVerification }}\u0026#34; /\u0026gt; {{ end }} 在 config.toml 內新增： [params] googleSiteVerification = \u0026#34;your-verification-code\u0026#34; 部署網站後 回到 Google Search Console 點選 驗證 5. 手動提交 sitemap.xml # 在 Google Search Console 中：\n進入 Sitemaps (網站地圖) 在輸入框內輸入： sitemap.xml 按 提交 Google 會開始抓取你的網站，並將其索引。\n6. 加速索引：使用 URL 檢查工具 # 如果你的網站已經發佈，但搜尋不到，可以手動向 Google 請求索引。\n在 Google Search Console 選擇 URL 檢查 貼上你的網站 URL，例如 https://yourusername.github.io/ 按 請求索引 Google 會優先處理這些請求，通常幾天內就會出現在搜尋結果中。\n7. 確保內容具備 SEO 優化 # 除了技術層面的設定，也要確保你的內容符合 SEO 規範：\n標題 (title)：每篇文章應該有清楚的標題 描述 (meta description)：可以在 config.toml 內設定 關鍵字 (keywords)：使用適當的關鍵字，但不要過度堆疊 內部連結 (internal linking)：在文章內部適當地連結其他內容 設定文章的 SEO 標籤 # 在 config.toml 內啟用 unsafe = true，確保 Hugo 正確渲染 HTML meta 標籤。\n[markup] [markup.goldmark] [markup.goldmark.renderer] unsafe = true 8. 總結 # 透過這幾個步驟，你的 GitHub Pages 就能讓 Google 正確索引：\n確保 GitHub Pages 部署成功 設定 robots.txt 允許搜尋引擎索引 確保 sitemap.xml 正常生成 提交網站到 Google Search Console 手動提交 sitemap.xml 使用 URL 檢查工具 加速索引 優化 SEO 內容，確保標題、描述與內部連結完整 完成這些步驟後，幾天內就能在 Google 上找到你的網站啦！\n如果有任何問題也歡迎下面留言討論！\n","date":"2025-02-08","externalUrl":null,"permalink":"/bukunblog/docs/github-pages-gsc/","section":"文章","summary":"","title":"[SEO]如何使用GoogleSearchConsole搜尋到你的 GitHub Pages","type":"docs"},{"content":"","date":"2025-02-08","externalUrl":null,"permalink":"/bukunblog/tags/github-pages/","section":"🏷️標籤","summary":"","title":"GitHub Pages","type":"tags"},{"content":"","date":"2025-02-08","externalUrl":null,"permalink":"/bukunblog/tags/googlesearchconsole/","section":"🏷️標籤","summary":"","title":"GoogleSearchConsole","type":"tags"},{"content":"","date":"2025-02-08","externalUrl":null,"permalink":"/bukunblog/tags/seo/","section":"🏷️標籤","summary":"","title":"SEO","type":"tags"},{"content":"","date":"2025-02-08","externalUrl":null,"permalink":"/bukunblog/categories/seo/","section":"📂分類","summary":"","title":"SEO","type":"categories"},{"content":"上一篇文章我們介紹了 hugo.toml、languages.toml 以及 menus.toml 的設定。\n這次我們要進一步調整 params.toml，這是影響 Hugo 網站外觀與功能的關鍵設定檔。\n如果你還沒完成前一步的設定，請先參閱 自訂主題。\n1. 重要全局設定 # 這些參數決定網站的基本外觀與功能，例如顏色、背景圖等。\nBlowfish 主題已內建多種配色方案，可參閱 全局配置。\ncolorScheme = \u0026#34;blowfish\u0026#34; defaultAppearance = \u0026#34;dark\u0026#34; # valid options: light or dark #預設亮色或暗色模式 autoSwitchAppearance = true #根據系統設定自動切換 defaultBackgroundImage = \u0026#34;/img/background.png\u0026#34; #全站背景圖 highlightCurrentMenuArea = true #高亮選中的導航區域 smartTOC = true # 啟用智慧目錄 確保背景圖片放置在 assets/img 內，否則無法正確載入！ 2. 修改頁腳 # 頁腳控制網站底部的顯示內容，如版權、滾動返回頂部等。\n[footer] showMenu = true # 顯示頁腳選單 showCopyright = true # 顯示版權資訊 showThemeAttribution = true # 顯示主題版權標示 showAppearanceSwitcher = true # 允許使用者切換亮/暗模式 showScrollToTop = true # 顯示返回頂部按鈕 3. 修改主頁配置 # 設定首頁顯示的內容與佈局風格。\n[homepage] layout = \u0026#34;background\u0026#34; # 選擇首頁樣式 (可選 page, profile, hero, card, background, custom) showRecent = true # 顯示最新文章 showRecentItems = 12 # 最新文章數量 showMoreLink = true # 顯示「更多文章」按鈕 showMoreLinkDest = \u0026#34;docs\u0026#34; # 「更多文章」按鈕導向的頁面 cardView = true # 啟用卡片視圖 layoutBackgroundBlur = false # 背景模糊效果（適用於 background 佈局） 4. 修改文章配置 # 這些設定影響文章的顯示方式，例如顯示作者、日期、面包屑導航等。\n[article] showDate = true # 顯示發佈日期 showViews = false # 不顯示閱讀數 showLikes = false # 不顯示點讚數 showAuthor = true # 顯示作者資訊 showTableOfContents = true # 顯示文章目錄 showRelatedContent = true # 顯示相關文章 relatedContentLimit = 3 # 相關文章顯示數量 showPagination = true # 啟用文章分頁 heroStyle = \u0026#34;background\u0026#34; # 文章標題樣式 (可選 basic, big, background, thumbAndBackground) 5. 修改類別配置 # 調整分類頁面的外觀與內容。\n[taxonomy] showTermCount = true # 顯示分類數量 showHero = true # 啟用分類標題背景 heroStyle = \u0026#34;background\u0026#34; # 分類標題樣式 (可選 basic, big, background, thumbAndBackground) showBreadcrumbs = false # 不顯示面包屑導航 showTableOfContents = true # 啟用分類頁面的目錄 cardView = true # 啟用卡片視圖 6. 總結 # params.toml 是 Hugo Blowfish 主題最關鍵的設定檔之一。\n透過它，你可以輕鬆調整網站的標題、配色、導航選單、文章顯示方式等。\n下一篇文章將會深入探討 layouts/ 自訂佈局，讓你的網站更加符合個人需求！\n如果有任何問題也歡迎下面留言討論！\n","date":"2025-02-08","externalUrl":null,"permalink":"/bukunblog/docs/hugo-params-configuration/","section":"文章","summary":"","title":"[Hugo]外觀重要文件,params修改!","type":"docs"},{"content":"本篇文章將繼續介紹如何調整 Hugo 主題，讓網站符合需求。\nBlowfish 是這篇文章的範例主題，也是我正在使用的主題！\n如果你還沒建立 Hugo 網站，請參閱這一篇文章\n如果想進一步了解Blowfish，可以參考 Blowfish 官方文件。\n1. 基本設定 # Hugo 的主要設定檔是 config.toml或hugo.toml，這裡定義了網站的基本資訊、語言、主題等。\n而每個主題下載後，都會產生一個themes/下載的主題\n複製主題設定檔 # 建議直接複製主題內的 config/ 資料夾，以確保設定完整。\ncp -r themes/blowfish/exampleSite/* . 這將會覆蓋 config.toml，並讓網站的設定與官方範例一致。\n設定hugo.toml # 在 hugo.toml 中設定網站的基本資訊\nbaseURL = \u0026#34;https://example.com/\u0026#34; #未來部署需更改 languageCode = \u0026#34;zh-TW\u0026#34; title = \u0026#34;我的 Hugo 網站\u0026#34; theme = \u0026#34;blowfish\u0026#34; # 根據主題改變 重要 paginate = 10 # 設定每頁顯示的文章數量 確保 theme 設定正確，否則網站將無法正確載入！ 調整languages.toml # 如果網站有多語系需求，可以調整 languages.toml 來設定語言和網站標題。\nlanguageCode = \u0026#34;zh-tw\u0026#34; #使用的語言 languageName = \u0026#34;繁體中文\u0026#34; weight = 1 title = \u0026#34;Bukun的軟體學習部落格\u0026#34; #網站navbar顯示的名稱 修改網站 Logo 和簡介 # [params] logo = \u0026#34;img/logo.png\u0026#34; #此為navbar顯示的圖像 description = \u0026#34;軟體學習部落格\u0026#34; 關於作者 # [params.author] name = \u0026#34;Bukun\u0026#34; #你的名字 image = \u0026#34;img/author.png\u0026#34; #你的大頭貼 headline = \u0026#34;正在學習軟體的攝影師\u0026#34; #你的標語 bio = \u0026#34;慢慢學習，持續成長\u0026#34; #你的簡介 確保圖片放在 mysite/assets/img 內，否則無法顯示！ mysite/assets/img ├── logo.png # 你的圖像 ├── author.png # 你的大頭貼 這樣應該就能看見主頁的簡單架構已經出來囉！\n2. 設定導覽列 # menus.toml # 如果想要修改網站導覽列，可以在 config/_default/menus.toml 內加入：\n[[main]] identifier = \u0026#34;home\u0026#34; name = \u0026#34;主頁\u0026#34; #顯示的名稱 url = \u0026#34;/\u0026#34; #導向的頁面 weight = 1 [[main]] identifier = \u0026#34;blog\u0026#34; name = \u0026#34;文章\u0026#34; #顯示的名稱 url = \u0026#34;/posts/\u0026#34; #導向的頁面 weight = 2 [[main]] name = \u0026#34;分類\u0026#34; #顯示的名稱 url = \u0026#34;/categories/\u0026#34; #導向的頁面 weight = 3 這樣就能在導覽列顯示「主頁」、「文章」和「分類」的連結。\n3. 自訂樣式 (custom.css) # 如果你想要進一步修改 Blowfish 主題的樣式\n也可以在 assets/css/custom.css 內加入 CSS 來覆蓋預設樣式。\nbody { background-color: #222; color: #f5f5f5; } 總結 # 以上介紹了如何調整 Hugo Blowfish 主題，包括 config.toml、languages.toml、menus.toml、以及自訂 CSS 樣式。\n下一篇文章會進一步介紹params.toml ，讓網站更加個人化！\n如果有任何問題也歡迎下面留言討論！\n","date":"2025-02-07","externalUrl":null,"permalink":"/bukunblog/docs/hugo-simple-theme/","section":"文章","summary":"","title":"[Hugo]自訂主題,從config出發！","type":"docs"},{"content":"Hugo 是一款高效的靜態網站生成器，非常適合建立個人部落格或公司官網。\n本篇文章將從零開始，逐步建立一個 Hugo 網站。\n如果有任何問題，可以在 Hugo 官方論壇 上尋求幫助。\n安裝 Hugo # 首先，需要在電腦上安裝 Hugo，根據作業系統選擇適合的方法。\nmacOS # 使用 Homebrew 安裝 # brew install hugo 如果需要 Hugo 的 extended 版本（用於處理 SCSS/SASS），使用：\nbrew install hugo_extended Windows # 使用 Scoop 安裝 # scoop install hugo 或使用 Chocolatey 安裝 # choco install hugo -confirm 驗證安裝 # 安裝完成後，使用以下指令確認是否成功安裝：\nhugo version 若能看到 Hugo 的版本資訊，表示安裝成功。\nhugo v0.142.0 建立 Hugo 專案 # 要建立新的 Hugo 網站，執行：\nhugo new site my-blog 這將會建立一個新的 Hugo 專案，目錄結構如下：\nmy-blog/ ├── archetypes/ # 預設文章模板 ├── content/ # 文章內容 ├── layouts/ # 版型檔案 ├── static/ # 靜態資源 (圖片、CSS、JS) ├── themes/ # 佈景主題 ├── config.toml # 站點設定檔案 選擇佈景主題 # Hugo 可以使用不同的佈景主題來快速建立網站。從 Hugo Themes 挑選適合的主題，例如 blowfish，然後執行下載指令：\ncd my-blog git init git submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish 並在 config.toml 中設定主題：\ntheme = \u0026#34;blowfish\u0026#34; 設定網站基本資訊 # 在 config.toml 中，新增以下內容來設定網站基本資訊：\nbaseURL = \u0026#34;http://localhost:1313/\u0026#34; languageCode = \u0026#34;zh-TW\u0026#34; title = \u0026#34;我的 Hugo 網站\u0026#34; theme = \u0026#34;ananke\u0026#34; 建立第一篇文章 # 使用以下指令建立一篇 Markdown 文章：\nhugo new posts/my-first-post.md 然後用文字編輯器打開 content/posts/my-first-post.md，並填寫內容：\n--- title: \u0026#34;我的第一篇 Hugo 文章\u0026#34; date: 2025-02-06 draft: true --- 這是我的第一篇 Hugo 文章！ 啟動本地開發伺服器 # 當有了佈景主題和文章後，可以使用以下指令啟動本地伺服器來預覽網站：\nhugo server -D 然後打開瀏覽器，訪問 http://localhost:1313/，你將會看到目前快速建立的網站！\n總結 # 現在已經成功建立了一個 Hugo 網站，可以開始撰寫部落格文章。\n下面文章將更深入設定自訂主題，讓網站更具特色！\n如果有問題歡迎下面留言討論！\n","date":"2025-02-06","externalUrl":null,"permalink":"/bukunblog/docs/getting-started-hugo/","section":"文章","summary":"","title":"[Hugo]如何初步建立網站","type":"docs"},{"content":"","date":"2025-02-06","externalUrl":null,"permalink":"/bukunblog/tags/%E9%83%A8%E8%90%BD%E6%A0%BC/","section":"🏷️標籤","summary":"","title":"部落格","type":"tags"},{"content":"","externalUrl":null,"permalink":"/bukunblog/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"}]